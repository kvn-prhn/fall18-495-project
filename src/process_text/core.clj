(ns process-text.core
  (:gen-class)
  (:require [net.cgrand.enlive-html :as html])
  (:require [org.httpkit.client :as httpkit])
  (:require [clojure.pprint :as pprint])
  (:require [clj-http.client :as client])
  (:require [cheshire.core :as cheshire])
  )

(defn fetch-url [url]
	(html/html-resource (java.net.URL. url)))  ;TODO have a case for handling exceptions.

(defn load-word-file-as-list [f]
	"Load a file and return all of the words as a sequence."
	(with-open [rdr (clojure.java.io/reader f)]
		(clojure.string/join "\n" (line-seq rdr))  
	))

(defn remove-punc 
	"Remove punctuation from the given string."
	[x] 
	(clojure.string/trim-newline 
		(clojure.string/replace
			(clojure.string/replace 
				(clojure.string/trim-newline x) 
				#"[\|„“\"\.\\,=+%()\$!?<>;'、，،]"   ; comma varients https://en.wikipedia.org/wiki/Comma
				" ")
			"\n" ; second replace
			"")))

(defn url-encode [s] (java.net.URLEncoder/encode s "UTF-8"))
			
(defn extract-wiki-text 
	"given a wikipedia article in enlive form, get only the article text."
	[text]
	(defn iter-down
		[t] 
		(if (seq? t)
			(concat (map iter-down t))
			(if (nil? (get t :content))
				t
				(iter-down (get t :content))
			)
		)
	)
	(filter (fn [n] 
				;(and
				(not (clojure.string/blank? n)  ;)
				;(not (nil? (re-matches #"[0-9a-zA-Z]*" n)))
				;(not (nil? (re-matches #"[a-zA-Z]*" n)))
			))
		(map clojure.string/lower-case (map clojure.string/trim (clojure.string/split 
			(remove-punc (clojure.string/join " " (flatten (iter-down 
				(flatten (html/select text [:div.mw-body-content :div.mw-parser-output :p])) 
			)))) ; this is the article
			#" "
	)))))
	
	
(defn wcount 
	"count the number of occurances of each word. Returns a dictionary."
	[wlist]
	(let [mcount_input {}]
	  (loop [i 0 mcount mcount_input]
		(if (>= i (count wlist))
		  mcount
		  (recur (inc i) (if (nil? (get mcount (nth wlist i)))
			(assoc mcount (nth wlist i) 1)
			(update mcount (nth wlist i) inc)
		  ))
		)
	))
)

(defn wcount-merge
	"given a list of word count maps, merge them all together and sum counts"
	[wlists]
	;(println wlists)
	(reduce 
		(fn [wlist1 wlist2] 
			(loop [result wlist1 q wlist2]
				(if (= 0 (count q))
					result
					(let [ nextkey (first (keys q)) rmq (dissoc q nextkey)]
						(if (nil? (get result nextkey))
							(recur (assoc result nextkey 
								(get q nextkey)) rmq )
							(recur (assoc result nextkey 
								(+ (get result nextkey) (get q nextkey))) rmq )
						)
					)
				)
			)
		)
	wlists)
)

(defn wcount-normalize
	"given a word count map, return the same word count map but normalized."
	[wcount]
	(let [words (keys wcount) superCountSum 
		(loop [k 0 resultSum 0]
		  (if (>= k (count wcount))
		    resultSum
			(recur (inc k) (+ resultSum 
			  (get wcount (nth words k))
			))
		  )
		)
	  ]
	  (loop [k 0 resD {}]
	    (if (>= k (count (keys wcount)))
		  resD
		  (recur (inc k) (assoc resD (nth (keys wcount) k)
		    (/ (get wcount (nth (keys wcount) k)) superCountSum)
		  ))
		)
	  ) ; TODO
	)
)

(defn word-in-model 
	"get the chance that a word was generated using the given model m."
	[m w] ; model, word
	(if (contains? m w)
		(get m w)
		0))

(defn count-in-doc
	"get the count of a word w from a document d."
	[d w] ; model, word
	(if (contains? d w)
		(get d w)
		0))

		
(defn topic-probs
	[
		documentBows ; a list of all documents as bag-of-words (map string to count)
		vocabulary ; list of all words possible
		topicModelsInitial ; vector of models (map string to probability)
		bgModel ; since map (string to proability) for background words
		bgProb ; chance of using the background model.
	]
	(let ; what is being defined and constant? 
	  [
		doc-word-matrix ( ; matrix where rows = document, columns = word, value = count.
		  mapv (fn [docBow]
			(mapv 
			  (fn [word]
			    (count-in-doc docBow word)
			  )
			vocabulary)
		  ) documentBows)
		doc-word-count (fn [docIndex wordIndex] ; helper func for above matrix
			(nth (nth doc-word-matrix docIndex) wordIndex))
		topicModelIndices (range (count topicModelsInitial))
		documentBowsIndices (range (count documentBows))
		vocabularyIndices (range (count vocabulary))
	  ]
	(loop ; what is being defined to update at each step?
	  [
	    n 0 ; what iteration it is on.
		
		; initial topic models and probability of topics... will be updated in M-step.
		topicModels (mapv ;topicModels[topic][word] = chance of generating that word with topic.
		  (fn [topicIndex]
			(mapv 
			  (fn [wordIndex]
				(word-in-model (nth topicModelsInitial topicIndex) (nth vocabulary wordIndex))
			  )	(range (count vocabulary)) )
		  ) topicModelIndices)
			  
		piDocGenByTopic ( ; [document][topic] = probability doc was generated by topic
		  mapv (fn [docBowIndex]
		    (mapv (fn [topicIndex]
			  (/ 1 (count topicModels)) ; uniform distribution initially
			) topicModelIndices)
		  ) documentBowsIndices)
	  ]
	  (println "n =" n)
	  ;(println "piDocGenByTopic: " piDocGenByTopic)
	  ;(println "topicModels: " topicModels)
	  (let 
	    [ 
		; E-step hidden variables.
		zBgModelProbs ( ; [document][word] = probabiity it was generated by bg model.
		  mapv (fn [docBowIndex]
			(mapv 
			  (fn [wordIndex]
			    (let [word (nth vocabulary wordIndex)] 
				(if (contains? bgModel word)
			    (/ 
			      (* bgProb (word-in-model bgModel word))
				  (+
				    (* bgProb (word-in-model bgModel word))
				    (* 
					  (- 1 bgProb)
				      (reduce +  ; summation
					    (map (fn [topicIndex]
						  (*
						    (nth (nth piDocGenByTopic docBowIndex) topicIndex) ; probability of document generated by this topic
							(nth (nth topicModels topicIndex) wordIndex)
						  )
						) topicModelIndices)
					  )
				    )
				  )
				)
				0 ; if the word is not in the background model, then 0% of being generated.
				))
			  )
			vocabularyIndices)
		  ) documentBowsIndices)
		
		  zProbs ( ; [document][word][topic] = probabiity word in document was generated by topic.
		  mapv (fn [docBowIndex]
			(mapv 
			  (fn [wordIndex]
			    (let [word (nth vocabulary wordIndex)] 
			    ;(println "wordIndex =" wordIndex "word =" word)
			    (mapv 
				  (fn [topicIndex]
				    ;(println (nth topicModels topicIndex))
					(let [numer (reduce +  ; summation to normalize over all topics
					    (map (fn [topicIndexInner]
						  (*
							(nth (nth piDocGenByTopic docBowIndex) topicIndexInner) 
							(nth (nth topicModels topicIndexInner) wordIndex)
						  )
						) topicModelIndices)
						)]
				    (if (== numer 0)
					  0
					  (/ 
					    (* 
					      (nth (nth piDocGenByTopic docBowIndex) topicIndex) ; chance doc is generated by topic
						  (nth (nth topicModels topicIndex) wordIndex) ; chance of word being generated by topic
					    )
					    numer				  
					  )
					))
				  )
				topicModelIndices))
			  )
			vocabularyIndices)
		  ) documentBowsIndices)
	    ]
		;(pprint/pprint zBgModelProbs)
		;(pprint/pprint zProbs)
		(if (>= n 10)
		  piDocGenByTopic ; output when we're done.
		  (recur 
		    (inc n)
			
			; topicModels
		    (mapv ; [topic][word] = chance of generating that word with topic.
			  (fn [topicIndex]
			    (mapv 
				  (fn [wordIndex]
				  (let [denom (reduce + ; summation over documents
					    (mapv 
					      (fn [docBowIndex]
					  	    (*
						      (doc-word-count docBowIndex wordIndex)
							  (- 1 (nth (nth zBgModelProbs docBowIndex) wordIndex) )
							  (nth (nth (nth zProbs docBowIndex) wordIndex) topicIndex)
						    )
						  )
					    documentBowsIndices)) ]
				  (if (== denom 0)
				    0
				    (/
					  denom
					  (reduce + 
					    (mapv 
					      (fn [innerWordIndex] ; normalize over vocabulary
							(reduce + ; summation over documents
							  (mapv 
								(fn [docBowIndex]
								  (*
									(doc-word-count docBowIndex innerWordIndex)
									(- 1 (nth (nth zBgModelProbs docBowIndex) innerWordIndex) )
									(nth (nth (nth zProbs docBowIndex) innerWordIndex) topicIndex)
								  )
								)
							  documentBowsIndices)
							))
						vocabularyIndices )
					  )
				    )))
				  )	vocabularyIndices )
			  ) topicModelIndices) ; end topicModels
			
			; piDocGenByTopic
		    (mapv (fn [docBowIndex] ; [document][topic] = probability doc was generated by topic
				(mapv (fn [topicIndex]
				  (let [denom 
					  (reduce + 
					    (mapv 
						  (fn [wordIndex]
						    (*
							  (doc-word-count docBowIndex wordIndex)
							  (- 1 (nth (nth zBgModelProbs docBowIndex) wordIndex) )
							  (nth (nth (nth zProbs docBowIndex) wordIndex) topicIndex)
						    )
						  )
						  vocabularyIndices))
					] 
				    (if (== denom 0) 
					  0
					  (/
					    denom
						(reduce + 
						  (mapv 
						    (fn [outerTopicIndex]
						      (reduce + 
							  (mapv 
							    (fn [wordIndexInner]
								  (*
								    (doc-word-count docBowIndex wordIndexInner)
								    (- 1 (nth (nth zBgModelProbs docBowIndex) wordIndexInner) )
								    (nth (nth (nth zProbs docBowIndex) wordIndexInner) outerTopicIndex)
								  )
							    )
							    vocabularyIndices))
						    ) 
						  topicModelIndices))
					  )
					)
				  )
				) topicModelIndices)
			  ) documentBowsIndices) ; end piDocGenByTopic
		  ))
		) ; end inner let
	) ; end loop
  ) ; end first let
)


(defn write-language-model 
	"given a file name and a language model as a probability distribution,
	 write the data in the model to file. An additional description line is added."
	[fname m desc]
	(println "Writing to " fname)
	(with-open [w (clojure.java.io/writer fname)]
	  (.write w "#comment# ") 
	  (.write w desc) 
	  (.write w "\n") 
	  (loop [i 0]
		(if (>= i (count (keys m)))
		  (.close w)
		  (do 
			(.write w (str (nth (keys m) i))) 
			(.write w ",") 
			(.write w (str (get m (nth (keys m) i))) )
			(.write w "\n")
		  (recur (inc i)))
		)
	))
)


(defn read-language-model 
  "given a file name, read and write the langauge model to file."
  [fname]
  (with-open [rdr (clojure.java.io/reader fname)]
	(loop [m {}]
	  (let [nextLine (.readLine rdr)] 
	     (if (nil? nextLine)
			m
			(if (not (or (clojure.string/blank? nextLine) (clojure.string/starts-with? nextLine "#comment#") ))
			  (let [split-ln (clojure.string/split nextLine #",") 
					split-val (clojure.string/split (nth split-ln 1) #"/")] ; expects rational number.
				(recur (assoc m (nth split-ln 0) 
				 (if (= 2 (count split-val)) ; if it is a rational number or not.
					(/ (Integer/parseInt (nth split-val 0)) 
					  (Integer/parseInt (nth split-val 1)) ) ; if so, divide the two numbers
				    (Integer/parseInt (first split-val)) ; otherwise just include the number
				  )
			    )))
			  (recur m)
			)
		 )))
  ))

	
(defn wiki-url-to-document 
	"Given a wikipedia title and language, convert the article to a document containing the words"
	[v] ;[title lang-short, parent, level ]
	(let [title (nth v 0) 
		  lang-short (nth v 1)	
		  url (clojure.string/join "" [ "https://" lang-short ".wikipedia.org/wiki/" (url-encode title) ])]
		; (println (clojure.string/join "" ["Getting wikipedia article at " url]))
		(extract-wiki-text (fetch-url url))))

; Normal unexpanded version
(defn wiki-url-to-bow 
	"Given a wikipedia title and language, convert the article to a Bag of Words with counts."
	[v] ;[title lang-short, parent, level ]
	(wcount (wiki-url-to-document v)))

; Experimental version - expanding the documents with bilingual dictionary.
(defn wiki-url-to-bow-expand
	"Given a wikipedia title and language, convert the article to a Bag of Words with counts."
	[v source-dict target-dict] ;[title lang-short, parent, level ]
	(let [srcdoc (wiki-url-to-document v)]
	
	(wcount srcdoc)
	))
	
		
(defn wiki-url-to-links-list
	"Given a wikipedia title and language, get the first 10 titles of articles that are links to the given article.."
	[v] ;[title lang-short, parent, level]
	(let [title (nth v 0) 
	  lang-short (nth v 1)	
	  url (clojure.string/join "" [ "https://" lang-short ".wikipedia.org/w/api.php?action=query&prop=links&format=json&titles=" (url-encode title) ])]   ; pllimit=max
		(let [jres (cheshire/parse-string 
			(get (client/get url 
			  {:cookie-policy :none :content-type "text/html; charset=utf-8"}) :body))]
		  (println url)
		  (map 
		  (fn [n] (vector n lang-short title (inc (nth v 3)))) 
		  (distinct 
			(flatten 
			  (map 
				(fn [n] (clojure.string/replace (get n "title") #" " "_" )) 
				(get (nth (first (get (get jres "query") "pages")) 1) "links")))))
		)
	))
	

(defn expand-wiki-list 
	"Given a list of wikipedia titles, return all titles of articles
	that the given wikipedia titles have at least one link to."
	[wlist]
	;(println "Expanding " (count wlist) " links")
	(distinct (reduce concat (map wiki-url-to-links-list wlist))))

(defn load-dictionary-files
	"Given the list file names for dictionaries, load them all into a map 
	that links words to a list of possible translations for that word."
	[& fnames]
	(println "Loading " fnames)
	(let [raw-lines (flatten (loop [i 0 l (list)]
	  (if (>= i (count fnames))
		l
		(recur (inc i) (conj l 
			(with-open [rdr (clojure.java.io/reader (nth fnames i))]
			  (doall (line-seq rdr))
			))
		))
	  ))]
	  (println "\n\nraw-lines:")
      (println raw-lines)
	  ; raw-lines into them map
	  (loop [i 0 m {}]
	    (if (>= i (count raw-lines))
		  m
		  (recur (inc i)
		    (let [currln (str (nth raw-lines i))
				  split-first (clojure.string/split currln #"\|")
				  split-second (clojure.string/split (nth split-first 1) #"&")] 
				(println "\n\ncurrln:")
				(println currln)
				(println "\n\nsplit-first:")
				(println (first split-first))
				(println "\n\nsplit-second:")
				(println split-second) 
				(assoc m (first split-first) split-second)) ; map the first word to list of possible translations
			)
		)
	  )
    )
)

(defn -main
  "main function."
  [& args]
  (do
  
  (def en-to-de-dict (load-dictionary-files "dict-data/Dictcc-Dataset-1-List-test.txt" "dict-data/Dictcc-Dataset-2-List-test.txt"))
  ;(def en-to-de-dict (load-dictionary-files "dict-data/Dictcc-Dataset-1-List-En-First.txt" "dict-data/Dictcc-Dataset-2-List-En-First.txt"))
  (pprint/pprint en-to-de-dict)
  (pprint/pprint (count en-to-de-dict))
	;(def de-to-en-dict (load-dictionary-files "dict-data/Dictcc-Dataset-1-List.txt" "dict-data/Dictcc-Dataset-2-List.txt")) 
	
  
  (comment
    ; format of the articles: [ ["title" "lang-short"], parent, depth ]
   (def starting-articles-to-fetch 
     (map
		(fn [n] [ [(first n) (nth n 1)] (list n)])  ; 2 item vector of a list and the title-language pair
		  (list
		    [ "Fruit" "en", nil, 0 ]
		    [ "Frucht" "de", nil, 0 ]
		    ;[ "ثمرة" "ar", nil, 0 ] ; - this is not working yet :(
		  )))
	(pprint/pprint starting-articles-to-fetch)

	;(println "ثمرة")
	;(println (.getBytes "ثمرة"))
	; https://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html#encode(java.lang.String,%20java.lang.String)
	;(println (java.net.URLEncoder/encode "ثمرة" "UTF-8") )
	;(println (new java.lang.String (.getBytes "ثمرة") "US-ASCII")) ; encode it to ascii characters. 
	;(println "%E6%9E%9C%E5%AE%9E")
	;(comment
	;(println ( stringify-bytes "果实"))
	
	(def prop-links 
		(map 
		  (fn [inlistv]
		    [ (first inlistv) (loop [i 0 elist (nth inlistv 1)]
			  (if (>= i 1) 
				elist
				(recur (inc i) (reduce concat (list elist (expand-wiki-list elist))))
			  )) 
			] )
		starting-articles-to-fetch)
	)
	; maybe have articles keep a list of its "parent articles"?
	(pprint/pprint prop-links)
	; dictionaries used for expanding documents. 
	
	; new article format: [ ["title" "lang-short"] {word-count-map}]
	;(def testBows (map (fn [linklsv] [(first linklsv) (map wiki-url-to-bow (nth linklsv 1))]) prop-links) )	
	(def testBowsExpand (map 
	  (fn [linklsv] 
		[(first linklsv) ; vector with title and language
		  (map  ; second part is the expanded bow
			(fn [n] ; n is the link
				; TODO: change the ordering based on the language. 
				(wiki-url-to-bow-expand  n  en-to-de-dict  de-to-en-dict)
			)
			(nth linklsv 1))
		] 
	  ) prop-links)
	)	
	
	;(def testModels (map (fn [linklsv] [(first linklsv) (mapv wcount-normalize (nth linklsv 1))]) testBows))
	(def testModels (map (fn [linklsv] [(first linklsv) (mapv wcount-normalize (nth linklsv 1))]) testBowsExpand))
	;(def testModels (mapv wcount-normalize wikiBow))
	;(def bgModel (read-language-model "google-common-words.lm")) ; 100% chance of generating "the"
	;(def bgModelProb 0.7)
	;(def vocabulary (distinct (flatten [(map keys documentsBows) (keys bgModel) (flatten (map keys testBows))] )))
	
	(defn write-topic-models [] (map 
	  (fn [titleModelPair]
	    ;(pprint/pprint titleModelPair)
	    (pprint/pprint (str (nth titleModelPair 0)))
	    ;(pprint/pprint titleModelPair)
		(write-language-model (clojure.string/join #"" ["topic-model-" 
			(str (clojure.string/join #"-" (reverse (nth titleModelPair 0)))) ".lm"] )
			(wcount-merge (nth titleModelPair 1)) 
			(clojure.string/join #" " ["Topic model for" (str (nth titleModelPair 0))] ))
	  )
	  testModels))
	(println (write-topic-models));
	
	);comment
	;(pprint/pprint (topic-probs documentsBows vocabulary testModels bgModel bgModelProb))
	
	; code to make the background model.
	;(def google-word-list (clojure.string/split (load-word-file-as-list "google-10000-english.txt") #"\n") )
	;(def google-bg-model (wcount-normalize (wcount google-word-list)))
	;(write-language-model "google-common-words.lm" google-bg-model "The 10000 most common english words")
	
	;(def read-model (read-language-model "test-model-out.lm" ))
	;(println read-model)
	;(def many-wcount-maps (map  wiki-url-to-bow  urls-to-fetch))
	;(def blah (wcount-merge many-wcount-maps))
	;(pprint/pprint blah)
	;) ; end comment
))
